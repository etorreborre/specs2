

Follow the <link class="ok">  <a href="org.specs2.guide.Installation.html" tooltip="" class="ok">installation</a></link> instructions and create the following specification in a file named `HelloWorldSpec.scala`: 

```
import org.specs2.*

class HelloWorldSpec extends Specification:
  def is = s2"""

This is a specification to check the 'Hello world' string

The 'Hello world' string should
  contain 11 characters $e1
  start with 'Hello' $e2
  end with 'world' $e3

  """

  def e1 = "Hello world" must haveSize(11)
  def e2 = "Hello world" must startWith("Hello")
  def e3 = "Hello world" must endWith("world")
```


A <s2>specs2</s2> software specification is a Scala class extending `org.specs2.Specification` and declaring an `is` method.
That method defines a `s2` interpolated string with some plain text describing what the system should do
and some code with executable examples.

#### Unit specifications

The style of writing specifications above, with most of the text first, then executable examples, is unconventional.
You can, if you prefer, use an alternative style: 

```
// note the different import here
import org.specs2.mutable.*

class HelloWorldSpec extends Specification:

  "This is a specification to check the 'Hello world' string".br

  "The 'Hello world' string should" >> {
    "contain 11 characters" >> {
      "Hello world" must haveSize(11)
    }

    "start with 'Hello'" >> {
      "Hello world" must startWith("Hello")
    }

    "end with 'world'" >> {
      "Hello world" must endWith("world")
    }
  }
```


Both specifications will produce the same output.

### Execution

And this is it! Now you can execute your specification with a [*runner*](org.specs2.guide.Runners.html#Presentation) and observe the results:

```
sbt> testOnly *HelloWorldSpec

[info] HelloWorldSpec
[info]
[info] This is a specification to check the 'Hello world' string
[info]
[info] The 'Hello world' string should
[info]   + contain 11 characters
[info]   + start with 'Hello'
[info]   + end with 'world'
[info]
[info] Total for specification HelloWorldSpec
[info] Finished in 0 second, 58 ms
[info] 3 examples, 0 failure, 0 error
```


<h3 id="Learn more!" class="ribbon both-ribbon">Learn more!</h3>

<div class="ribbon-content">
    

The rest of this <link class="ok">  <a href="org.specs2.guide.UserGuide.html" tooltip="" class="ok">User Guide</a></link> will show you how to:

 * <link class="ok">  <a href="org.specs2.guide.Structure.html" tooltip="" class="ok">structure</a></link> your specification using one of the 2 major "styles" of specifications presented here: "Acceptance" and "Unit"
 * use the many <s2>specs2</s2> <link class="ok">  <a href="org.specs2.guide.Matchers.html" tooltip="" class="ok">matchers</a></link> to specify precisely the expected behavior of your application
 * <link class="ok">  <a href="org.specs2.guide.Runners.html" tooltip="" class="ok">run</a></link> your specification and output results in various formats
 * check out the <link class="ok">  <a href="org.specs2.guide.HowTo.html" tooltip="" class="ok">How to?</a></link> page to find an answer to a specific question

</div>